

@model IEnumerable<Book>
@using Microsoft.AspNetCore.Identity
@using Bookweb.Areas.Identity.Data
@using Bookweb.Models
@inject UserManager<BookwebUser> usermanager
@inject SignInManager<BookwebUser> SignInManager
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@if (SignInManager.IsSignedIn(User)) //if logged in (any role)
{
    <div class="row w-100 justify-content-end">
        <a href="/Book/Add" id="add-book" class="col-3 btn btn-lg btn-default">Add new book</a>
    </div>
}
@using (Html.BeginForm("SearchByTitle", "Book", FormMethod.Post))
{
    <div class="row w-100">
        <input id="search-title-input" type="text" class="col col-9 btn-lg" placeholder="Search by title..." @*id="title"*@ name="title"/>
       
        <input name="searchSubmitBtn" type="submit" class="col col-3 btn btn-lg btn-primary" value="Search" />
    </div>
}
<div id="book-list" class="border-top">
    @if (User.IsInRole("USER") || User.IsInRole("ADMIN"))
    {
        List<Book> books = new List<Book>();
        foreach (var b in Model.OrderBy(b => b.Title))
        {
            books.Add(b);
            if (b.IsAccepted == false)
            {
                if (User.IsInRole("ADMIN"))
                {
                    <div class="book-display-line">
                        <span>@books.Count</span>
                        <span>@b.Title</span>
                        <span>@b.Author</span>
                        <span>@b.Description</span>
                        @if (User.IsInRole("ADMIN"))
                        {
                            <span><a href="/Book/Remove?id=@b.ID" class="remove-btn">Remove</a></span>
                            <span><a href="/Book/Accept?id=@b.ID" class="accept-btn">Accept</a></span>
                        }
                        @if (User.IsInRole("USER") || User.IsInRole("ADMIN"))
                        {
                            <span><a href="/Book/AddToFavorite?id=@b.ID" class="add-to-favorite-btn">Add to Favorite</a></span>
                        }
                    </div>
                }
            }
            else
            {
                <div>
                    <span>@books.Count</span>
                    <span>@b.Title</span>
                    <span>@b.Author</span>
                    <span>@b.Description</span>
                    @if (User.IsInRole("ADMIN"))
                    {
                        <span><a href="/Book/Remove?id=@b.ID" class="remove-btn">Remove</a></span>
                    }
                    @if (User.IsInRole("USER") || User.IsInRole("ADMIN"))
                    {
                        <span><a href="/Book/AddToFavorite?id=@b.ID">Add to Favorite</a></span>
                    }
                </div>
            }
        }
    }
    else
    {
        List<Book> books = new List<Book>();
        foreach (var b in Model.Where(b => b.IsAccepted == true).OrderBy(b => b.Title))
        {
            books.Add(b);
            <div>
                <span>@books.Count</span>
                <span>@b.Title</span>
                <span>@b.Author</span>
                <span>@b.Description</span>
            </div>
        }
    }

</div>
